{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-esp-eber-ws"
		},
		"synapse-course-esp-eber-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-esp-eber-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-esp-eber-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ls_asynapsealds_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourseespdl.dfs.core.windows.net/"
		},
		"ls_serverless_sql_pool_electric_vehicle_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:synapse-course-esp-eber-ws-ondemand.sql.azuresynapse.net,1433"
		},
		"ls_serverless_sql_pool_electric_vehicle_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "electric_vehicle_ldw"
		},
		"synapse-course-esp-eber-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourseespdl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folfer_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_electric_vehicle_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "silver/vehicle"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_silver_vehicle"
					},
					"v_folfer_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/vehicle",
								"usp_name": "silver.usp_silver_vehicle"
							},
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/propietary",
								"usp_name": "silver.usp_silver_propietary"
							},
							{
								"folder_path": "silver/location",
								"usp_name": "silver.usp_silver_location"
							},
							{
								"folder_path": "silver/cafv_eligibility",
								"usp_name": "silver.usp_silver_cafv_eligibility"
							},
							{
								"folder_path": "silver/vehicle_type",
								"usp_name": "silver.usp_silver_vehicle_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T16:42:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_electric_vehicle_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_electric_vehicle_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_vehicle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Vehicle Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_vehicle",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Vehicle",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Vehicle Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.vehicle')IS NOT NULL\n    DROP EXTERNAL TABLE silver.vehicle;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.vehicle\nWITH (\n    DATA_SOURCE = electric_vehicle_src,\n    LOCATION = 'silver/vehicle',\n    FILE_FORMAT = parquet_file_format\n)\nAS \n    SELECT  vehicle_id, vin, model_year, make, model, electric_range, base_MSRP as base_msrp,\n            vehicle_type_id, cafv_eligibility_id,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location) +2,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1)- CHARINDEX(' ', vehicle_location) - 1\n                )as FLOAT    \n            )AS longitude,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ',vehicle_location) + 1) + 1,\n                    LEN(vehicle_location) - CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1) - 1\n                ) as FLOAT\n            )AS latitude\n    FROM bronze.vehicle;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-01T23:08:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_vehicle')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_electric_vehicle_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_vehicle_registration')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE electric_vehicle_ldw;\n"
								},
								{
									"type": "Query",
									"text": "SELECT DISTINCT\n    year,\n    month\nFROM bronze.vw_vehicle_registration_csv\nORDER BY year, month;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partitions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_electric_vehicle_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/vehicle_registration/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partitions",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partitions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_vehicle_registration]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Silver View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE electric_vehicle_ldw;"
								},
								{
									"type": "Query",
									"text": "-- Create view for \"vehicle_registration\"\nDROP  VIEW IF EXISTS silver.vw_vehicle_registration;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW silver.vw_vehicle_registration\nAS\n    SELECT  \n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\n    FROM\n        OPENROWSET(\n            BULK 'silver/vehicle_registration/year=*/month=*/*.parquet',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'PARQUET'\n        )\n        WITH(\n            vehicle_id          INT,\n            location_id         SMALLINT,\n            propietary_id       INT,\n            dol_vehicle_id      INT,\n            registration_date   DATETIME2(7)\n        )\n        AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_electric_vehicle_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_electric_vehicle_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_vehicle_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Vehicle Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_vehicle",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Vehicle Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Vehicle Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_vehicle]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_electric_vehicle_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T15:40:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_vehicle')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_electric_vehicle_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_electric_vehicle_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asynapsealds",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "electric-vehicle-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asynapsealds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_vehicle')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asynapsealds",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/vehicle",
						"fileSystem": "electric-vehicle-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asynapsealds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_asynapsealds')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_asynapsealds_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_electric_vehicle_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_pool_electric_vehicle_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_pool_electric_vehicle_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-esp-eber-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-esp-eber-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-esp-eber-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-esp-eber-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/virtualization"
				},
				"content": {
					"query": "USE electric_vehicle_ldw;\n\n--Create \"Vehicle\" Table\nIF OBJECT_ID('bronze.vehicle') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vehicle\n\nCREATE EXTERNAL TABLE bronze.vehicle\n            (\n                vehicle_id            INT ,\n                vin                   VARCHAR(10) ,\n                model_year            SMALLINT ,\n                make                  VARCHAR(25) ,\n                model                 VARCHAR(25) ,\n                electric_range        SMALLINT ,\n                base_MSRP             INT ,\n                vehicle_type_id       SMALLINT ,\n                cafv_eligibility_id   SMALLINT ,\n                vehicle_location      VARCHAR(30) \n            )\n     WITH (\n        LOCATION = 'bronze/vehicle.csv',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/vehicle'\n         \n    );\n    \n\n\n  select * from bronze.vehicle\n\n  --Create \"calendar\" Table\n  IF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar\n\n    CREATE EXTERNAL TABLE bronze.calendar\n    (\n            date_key        INT , \n            date            DATE , \n            year            SMALLINT , \n            month           TINYINT , \n            day             TINYINT , \n            month_name      VARCHAR(10) , \n            day_name        VARCHAR(10) ,\n            day_of_year     SMALLINT ,\n            week_of_month   TINYINT , \n            week_of_year    TINYINT \n    )\n     WITH (\n        LOCATION = 'bronze/calendar.csv',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format_v2,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/calendar'\n    );\n    \n    SELECT * FROM bronze.calendar\n\n  --Create \"location\" Table\n  IF OBJECT_ID('bronze.location') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.location\n\n    CREATE EXTERNAL TABLE bronze.location\n    (\n            location_id                 SMALLINT,\n            country                     VARCHAR(30),\n            city                        VARCHAR(30),\n            state                       VARCHAR(30),\n            postal_code                 VARCHAR(5),\n            legislative_district        VARCHAR(2),\n            census_tract                VARCHAR(11)\n    )\n     WITH (\n        LOCATION = 'bronze/location.csv',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format_v3,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/location'\n    );\n    \n    SELECT * FROM bronze.location\n\n  --Create \"propietary\" Table\n  IF OBJECT_ID('bronze.propietary') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.propietary\n\n    CREATE EXTERNAL TABLE bronze.propietary\n    (\n            propietary_id       TINYINT,\n            electric_utility    VARCHAR(120)\n    )\n     WITH (\n        LOCATION = 'bronze/propietary.tsv',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = tsv_file_format,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/propietary'\n    );\n    \n    SELECT * FROM bronze.propietary;\n\n\n  --Create \"vehicle_registration_csv\" Table\n  IF OBJECT_ID('bronze.vehicle_registration_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vehicle_registration_csv\n\n    CREATE EXTERNAL TABLE bronze.vehicle_registration_csv\n    (\n            vehicle_id          INT,\n            location_id         SMALLINT,\n            propietary_id       TINYINT,\n            dol_vehicle_id      INT,\n            registration_date   DATETIME2(7)\n    )\n     WITH (\n        LOCATION = 'bronze/vehicle_registration_csv/**',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/vehicle_registration_csv'\n    );\n    \n    SELECT TOP 100 *\n    FROM bronze.vehicle_registration_csv\n    WHERE YEAR(registration_date) = 2025 and month(registration_date)= 2;\n\n\n--Create \"vehicle_registration_parquet\" Table\n  IF OBJECT_ID('bronze.vehicle_registration_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vehicle_registration_parquet\n\n    CREATE EXTERNAL TABLE bronze.vehicle_registration_parquet\n    (\n            vehicleId          INT,\n            locationId         SMALLINT,\n            propietaryId       TINYINT,\n            dolVehicleId       INT,\n            registrationDate   DATETIME2(7)\n    )\n     WITH (\n        LOCATION = 'bronze/vehicle_registration_parquet/**',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = parquet_file_format,\n     );\n    \n    SELECT TOP 100 *\n    FROM bronze.vehicle_registration_parquet\n   \n\n--Create \"vehicle_registration_delta\" Table\n  IF OBJECT_ID('bronze.vehicle_registration_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vehicle_registration_delta\n\n    CREATE EXTERNAL TABLE bronze.vehicle_registration_delta\n    (\n            vehicleId          INT,\n            locationId         SMALLINT,\n            propietaryId       TINYINT,\n            dolVehicleId       INT,\n            registrationDate   DATETIME2(7)\n    )\n     WITH (\n        LOCATION = 'bronze/vehicle_registration_delta',\n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = delta_file_format,\n     );\n    \n    SELECT TOP 100 *\n    FROM bronze.vehicle_registration_delta\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/utils"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE  electric_vehicle_ldw\nGO\n\nALTER DATABASE electric_vehicle_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE electric_vehicle_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_create_gold_quantity_of_vehicle_by_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/transformation"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n/*\nSe requiere obtener informacion sobre la cantidad de \"Vehiculos electricos de bateria (BEV)\" y \nlos \"Vehiculos electricos Hibridos enchufables (PHEV)\"\nregistrados por \"marca (make)\" en un año y \"mes\" en especifico.\n\n*/\n\n/*\nSELECT c.year,c.month, \n        v.make, \n        vt.electric_vehicle_type,\n        COUNT(1) as vehicle_register_count\nFROM [silver].[vw_vehicle_registration] vr\nINNER JOIN silver.vehicle v ON (vr.vehicle_id = v.vehicle_id)\nINNER JOIN silver.vehicle_type vt ON (vt.vehicleType = v.vehicle_type_id)\nINNER JOIN silver.calendar c ON (CAST(vr.registration_date as DATE) = c.date)\nWHERE c.year = '2024' AND c.month = '06'\nGROUP BY c.year,c.month, v.make, vt.electric_vehicle_type\n*/\n\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '01' GO\n\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '02' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '03' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '04' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '05' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '06' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '07' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '08' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '09' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '10' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '11' GO\nEXEC gold.usp_gold_quantity_of_vehicle_by_type '2024', '12' GO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_create_silver_vehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.vehicle')IS NOT NULL\n    DROP EXTERNAL TABLE silver.vehicle\nGO\n\nCREATE EXTERNAL TABLE silver.vehicle\nWITH (\n    DATA_SOURCE = electric_vehicle_src,\n    LOCATION = 'silver/vehicle',\n    FILE_FORMAT = parquet_file_format\n)\nAS \n    SELECT  vehicle_id, vin, model_year, make, model, electric_range, base_MSRP as base_msrp,\n            vehicle_type_id, cafv_eligibility_id,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location) +2,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1)- CHARINDEX(' ', vehicle_location) - 1\n                )as FLOAT    \n            )AS longitude,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ',vehicle_location) + 1) + 1,\n                    LEN(vehicle_location) - CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1) - 1\n                ) as FLOAT\n            )AS latitude\n    FROM bronze.vehicle\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_usp_silver_vehicle_registration')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE PROCEDURE silver.usp_silver_vehicle_registration\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS \nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt = '\n        CREATE EXTERNAL TABLE silver.vehicle_registration_' + @year + '_' + @month + '\n        WITH\n        (\n           DATA_SOURCE = electric_vehicle_src,\n           LOCATION = ''silver/vehicle_registration/year=' + @year + '/month=' + @month + ''',\n           FILE_FORMAT = parquet_file_format\n        )\n        AS\n        SELECT\n            vehicleId as vehicle_id,\n            locationId as location_id,\n            propietaryId as propietary_id,\n            dolVehicleId as dol_vehicle_id,\n            registrationDate as registration_date\n        FROM bronze.vw_vehicle_registration_csv\n        WHERE year = ''' + @year + ''' AND month = ''' + @month + '''\n        ';\n\n     PRINT(@create_sql_stmt)\n\n     EXEC sp_executesql @create_sql_stmt \n\n     SET   @drop_sql_stmt= \n            'DROP EXTERNAL TABLE silver.vehicle_registration_' + @year +  '_' + @month ;\n\n     PRINT(@drop_sql_stmt)\n\n     EXEC sp_executesql @drop_sql_stmt;\nEND \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/virtualization"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\n--Create view for \"vw_cafv_elegibility\" file\nDROP VIEW IF EXISTS bronze.vw_cafv_elegibility\nGO \n\nCREATE VIEW bronze.vw_cafv_elegibility\nAS \n    SELECT \n        cafv_eligibility_ID,\n        classification\n        FROM\n        OPENROWSET(\n            BULK 'bronze/cafv_eligibility.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b'\n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS cafv_eligibility\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            cafv_eligibility_ID SMALLINT '$.cafvEligibility',\n            classification VARCHAR(100)\n        );\n\nSelect * from bronze.vw_cafv_elegibility\nGO\n\n\n\n--Create view for \"vehicle_type\" file\nDROP VIEW IF EXISTS bronze.vw_vehicle_type\nGO \n\nCREATE VIEW bronze.vw_vehicle_type\nAS \n    SELECT \n        vehicleType, electric_vehicle_type\n        FROM\n        OPENROWSET(\n            BULK 'bronze/vehicle_type.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'            \n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS vehicle_type\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            vehicleType SMALLINT,\n            electric_vehicle_type VARCHAR(50) '$.electricVehicleType'\n              )\n        GO\n\nSELECT * from bronze.vw_vehicle_type\nGO\n\n\n--Create view for \"vehicle_registration_csv\" file\nDROP VIEW IF EXISTS bronze.vw_vehicle_registration_csv\nGO\n\nCREATE VIEW bronze.vw_vehicle_registration_csv\nAS\n SELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'bronze/vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) WITH (\n        vehicleId       INT,\n        locationId      SMALLINT,\n        propietaryId    TINYINT,\n        dolVehicleId    INT,\n        registrationDate    DATETIME2(7)\n    ) AS [result]\n    GO\n\nSELECT * FROM bronze.vw_vehicle_registration_csv\n\nSELECT COUNT(1)\nFROM bronze.vw_vehicle_registration_csv\nWHERE year = '2024' AND month = '01';\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_create_external_data_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/utils"
				},
				"content": {
					"query": "USE electric_vehicle_ldw;\n\nIF NOT EXISTS (SELECT name FROM sys.external_data_sources WHERE name = 'electric_vehicle_src' )\nCREATE EXTERNAL DATA SOURCE electric_vehicle_src\nWITH\n(   LOCATION = 'https://synapsecourseespdl.dfs.core.windows.net/electric-vehicle-data'\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/transformation"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\n-- Create view for \"vw_quantity_of_vehicle_by_type\"\nDROP  VIEW IF EXISTS gold.vw_quantity_of_vehicle_by_type\nGO\n\nCREATE VIEW gold.vw_quantity_of_vehicle_by_type\nAS\n    SELECT  \n        *\n    FROM\n        OPENROWSET(\n            BULK 'gold/quantity_of_vehicle_by_type/year=*/month=*/*.parquet',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'PARQUET'\n        )\n        WITH(\n            year                        SMALLINT,\n            month                       TINYINT,\n            make                        VARCHAR(25),\n            electric_vehicle_type       VARCHAR(40),\n            vehicle_register_count      INT            \n        )\n        AS [result]\n    GO\n\n    SELECT * FROM gold.vw_quantity_of_vehicle_by_type\n    GO\n\n\n--Create view for \"vehicle_registered_by_year_and_month\"\n    DROP VIEW IF EXISTS gold.vw_vehicle_registered_by_year_and_month\n    GO\n\n    CREATE VIEW gold.vw_vehicle_registered_by_year_and_month\n    AS\n    SELECT * \n    FROM \n        OPENROWSET(\n            BULK 'gold/vehicle_registered_by_year_and_month/year=*/month=*/*.parquet',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'PARQUET'\n        )\n        WITH( \n            year                    SMALLINT,\n            month                   TINYINT,\n            registration_date       DATETIME2(7),\n            vin                     VARCHAR(10),\n            model_year              SMALLINT,\n            make                    VARCHAR(50),\n            model                   VARCHAR(25),\n            electric_range          SMALLINT,\n            longitude               FLOAT, \n            latitude                FLOAT, \n            country                 VARCHAR(30),\n            city                    VARCHAR(30),\n            state                   VARCHAR(2),\n            postal_code             VARCHAR(5)\n        )\n        AS [result]\n        GO \n\n        Select * from gold.vw_vehicle_registered_by_year_and_month\n        WHERE year = 2024 and month = 6\n        GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.calendar')IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\nCREATE EXTERNAL TABLE silver.calendar\nWITH \n(\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/calendar',\n        FILE_FORMAT = parquet_file_format\n)\nAS\n\nSELECT * \nFROM bronze.calendar\nGO\n\nSELECT * FROM silver.calendar\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_usp_gold_quantity_of_vehicle_by_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE  OR ALTER PROCEDURE gold.usp_gold_quantity_of_vehicle_by_type\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS \nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt = '\n        CREATE EXTERNAL TABLE gold.quantity_of_vehicle_by_type' + @year + '_' + @month + '\n        WITH\n        (\n           DATA_SOURCE = electric_vehicle_src,\n           LOCATION = ''gold/quantity_of_vehicle_by_type/year=' + @year + '/month=' + @month + ''',\n           FILE_FORMAT = parquet_file_format\n        )\n        AS\n                SELECT c.year,c.month, \n                v.make, \n                vt.electric_vehicle_type,\n                COUNT(1) as vehicle_register_count\n                FROM [silver].[vw_vehicle_registration] vr\n                INNER JOIN silver.vehicle v ON (vr.vehicle_id = v.vehicle_id)\n                INNER JOIN silver.vehicle_type vt ON (vt.vehicleType = v.vehicle_type_id)\n                INNER JOIN silver.calendar c ON (CAST(vr.registration_date as DATE) = c.date)\n                WHERE c.year = ''' + @year + ''' AND c.month = ''' + @month + '''\n                GROUP BY c.year,c.month, v.make, vt.electric_vehicle_type\n        ';\n\n     PRINT(@create_sql_stmt)\n\n     EXEC sp_executesql @create_sql_stmt \n\n     SET   @drop_sql_stmt= \n            'DROP EXTERNAL TABLE gold.quantity_of_vehicle_by_type' + @year +  '_' + @month ;\n\n     PRINT(@drop_sql_stmt)\n\n     EXEC sp_executesql @drop_sql_stmt;\nEND \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/utils"
				},
				"content": {
					"query": "USE electric_vehicle_ldw;\n\n--Create External File Format for \"csv_file_format\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'csv_file_format' )\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH (\n         FORMAT_TYPE = DELIMITEDTEXT\n      ,  FORMAT_OPTIONS ( \n         FIELD_TERMINATOR = ','\n      ,  STRING_DELIMITER = '\"'\n      ,  FIRST_ROW = 2\n      ,  USE_TYPE_DEFAULT = FALSE\n      ,  ENCODING = 'UTF8'\n      ,  PARSER_VERSION = '2.0'\n    )\n   );\n\n\n--Create External File Format for \"csv_file_format_v2\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'csv_file_format_v2' )\nCREATE EXTERNAL FILE FORMAT csv_file_format_v2\n   WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n         ,  FORMAT_OPTIONS ( \n            FIELD_TERMINATOR = ';'\n         ,  STRING_DELIMITER = '\"'\n         ,  FIRST_ROW = 2\n         ,  USE_TYPE_DEFAULT = FALSE\n         ,  ENCODING = 'UTF8'\n         ,  PARSER_VERSION = '2.0'\n         )\n   );\n\n\n--Create External File Format for \"csv_file_format_v3\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'csv_file_format_v3' )\nCREATE EXTERNAL FILE FORMAT csv_file_format_v3\n   WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n         ,  FORMAT_OPTIONS ( \n            FIELD_TERMINATOR = ';'\n         ,  STRING_DELIMITER = '\\'\n         ,  FIRST_ROW = 2\n         ,  USE_TYPE_DEFAULT = FALSE\n         ,  ENCODING = 'UTF8'\n         ,  PARSER_VERSION = '2.0'\n         )\n   );\n\n--Create External File Format for \"tsv_file_format\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'tsv_file_format' )\nCREATE EXTERNAL FILE FORMAT tsv_file_format\n   WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n         ,  FORMAT_OPTIONS ( \n            FIELD_TERMINATOR = '\\t'\n         ,  STRING_DELIMITER = '\"'\n         ,  FIRST_ROW = 2\n         ,  USE_TYPE_DEFAULT = FALSE\n         ,  ENCODING = 'UTF8'\n         ,  PARSER_VERSION = '2.0'\n         )\n   );\n\n\n\n--Create an external file format for \"parquet_file_format\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'parquet_file_format' )\nCREATE EXTERNAL FILE FORMAT parquet_file_format\n   WITH (\n         FORMAT_TYPE = PARQUET\n        ,DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'      \n         );\n\n\n--Create an external file format for \"delta_file_format\"\nIF NOT EXISTS (SELECT name FROM sys.external_file_formats WHERE name = 'delta_file_format' )\nCREATE EXTERNAL FILE FORMAT delta_file_format\n   WITH (\n         FORMAT_TYPE = DELTA\n        \n         );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_create_gold_vehicle_information')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/transformation"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\n/*  Query base para la creacion de la tabla gold_vehicle_information\nSELECT \n    c.year,c.month,\n    vr.registration_date,\n    v.vin, v.model_year, v.make, v.model, v.electric_range, v.longitude, v.latitude,\n    l.country, l.city, l.state, l.postal_code\nFROM silver.vw_vehicle_registration vr \nINNER JOIN silver.vehicle v ON (vr.vehicle_id = v.vehicle_id)\nINNER JOIN silver.location l ON (vr.location_id = l.location_id)\nINNER JOIN silver.calendar c ON (CAST(vr.registration_date as DATE) = c.date)\nWHERE c.year = '2024' and c.month = '06'\nORDER BY v.vin, vr.registration_date\nGO \n*/\n\n\nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '01' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '02' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '03' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '04' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '05' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '06' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '07' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '08' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '09' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '10' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '11' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2024', '12' GO \n\nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2025', '01' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2025', '02' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2025', '03' GO \nEXEC gold.usp_gold_vehicle_registered_by_year_and_month '2025', '04' GO \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_create_silver_propietary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.propietary')IS NOT NULL\n    DROP EXTERNAL TABLE silver.propietary\nGO\n\nCREATE EXTERNAL TABLE silver.propietary\nWITH \n(\n      DATA_SOURCE = electric_vehicle_src,\n      LOCATION = 'silver/propietary',\n      FILE_FORMAT = parquet_file_format\n)\nAS\n\nSELECT * \nFROM bronze.propietary\nGO\n\n\nSELECT * \nFROM silver.propietary\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_usp_gold_vehicle_information')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_vehicle_registered_by_year_and_month\n@year   VARCHAR(4),\n@month  VARCHAR(2)\nAS\nBEGIN \n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = '\n        CREATE EXTERNAL TABLE gold.vehicle_registered_by_year_and_month_' + @year + '_' + @month + '\n        WITH \n        ( \n            DATA_SOURCE = electric_vehicle_src,\n            LOCATION = ''gold/vehicle_registered_by_year_and_month/year=' + @year + '/month=' + @month + ''',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS\n        SELECT \n            c.year,c.month,\n            vr.registration_date,\n            v.vin, v.model_year, v.make, v.model, v.electric_range, v.longitude, v.latitude,\n            l.country, l.city, l.state, l.postal_code\n        FROM silver.vw_vehicle_registration vr \n        INNER JOIN silver.vehicle v ON (vr.vehicle_id = v.vehicle_id)\n        INNER JOIN silver.location l ON (vr.location_id = l.location_id)\n        INNER JOIN silver.calendar c ON (CAST(vr.registration_date as DATE) = c.date)\n        WHERE c.year = ''' + @year + ''' and c.month = ''' + @month + '''';\n\n        PRINT(@create_sql_stmt)\n\n        EXEC sp_executesql @create_sql_stmt;\n\n        SET @drop_sql_stmt = \n            'DROP EXTERNAL TABLE gold.vehicle_registered_by_year_and_month_' + @year + '_' + @month;\n\n        PRINT(@drop_sql_stmt)\n\n        EXEC sp_executesql @drop_sql_stmt;\nEND\n\n\n\n\n        ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_create_silver_location')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.location')IS NOT NULL\n    DROP EXTERNAL TABLE silver.location\nGO\n\nCREATE EXTERNAL TABLE silver.location\nWITH \n(\n      DATA_SOURCE = electric_vehicle_src,\n      LOCATION = 'silver/location',\n      FILE_FORMAT = parquet_file_format\n)\nAS\n\nSELECT * \nFROM bronze.location\nGO\n\n\nSELECT * \nFROM silver.location\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_usp_create_silver_vehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_vehicle\nAS\nBEGIN\n        IF OBJECT_ID('silver.vehicle')IS NOT NULL\n        DROP EXTERNAL TABLE silver.vehicle;\n\n\nCREATE EXTERNAL TABLE silver.vehicle\nWITH (\n    DATA_SOURCE = electric_vehicle_src,\n    LOCATION = 'silver/vehicle',\n    FILE_FORMAT = parquet_file_format\n)\nAS \n    SELECT  vehicle_id, vin, model_year, make, model, electric_range, base_MSRP as base_msrp,\n            vehicle_type_id, cafv_eligibility_id,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location) +2,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1)- CHARINDEX(' ', vehicle_location) - 1\n                )as FLOAT    \n            )AS longitude,\n            CAST(\n                SUBSTRING(\n                    vehicle_location,\n                    CHARINDEX(' ', vehicle_location, CHARINDEX(' ',vehicle_location) + 1) + 1,\n                    LEN(vehicle_location) - CHARINDEX(' ', vehicle_location, CHARINDEX(' ', vehicle_location) + 1) - 1\n                ) as FLOAT\n            )AS latitude\n    FROM bronze.vehicle;\n\nEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_create_silver_cafv_eligibility')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.cafv_eligibility')IS NOT NULL\n    DROP EXTERNAL TABLE silver.cafv_eligibility\nGO\n\nCREATE EXTERNAL TABLE silver.cafv_eligibility\nWITH \n(\n      DATA_SOURCE = electric_vehicle_src,\n      LOCATION = 'silver/cafv_eligibility',\n      FILE_FORMAT = parquet_file_format\n)\nAS\n   SELECT \n        cafv_eligibility_ID, classification\n        FROM\n        OPENROWSET(\n            BULK 'bronze/cafv_eligibility.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b'\n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS cafv_eligibility\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            cafv_eligibility_ID SMALLINT '$.cafvEligibility',\n            classification VARCHAR(100)\n        )\nGO\n\n\nSELECT * FROM silver.cafv_eligibility\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_usp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_calendar\nAS \nBEGIN\n\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n    WITH\n    (\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/calendar',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT * FROM bronze.calendar;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_create_silver_vehicle_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nIF OBJECT_ID('silver.vehicle_type')IS NOT NULL\n    DROP EXTERNAL TABLE silver.vehicle_type\nGO\n\nCREATE EXTERNAL TABLE silver.vehicle_type\nWITH \n(\n      DATA_SOURCE = electric_vehicle_src,\n      LOCATION = 'silver/vehicle_type',\n      FILE_FORMAT = parquet_file_format\n)\nAS\n   SELECT \n        vehicleType, electric_vehicle_type\n        FROM\n        OPENROWSET(\n            BULK 'bronze/vehicle_type.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'            \n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS vehicle_type\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            vehicleType SMALLINT,\n            electric_vehicle_type VARCHAR(50) '$.electricVehicleType'\n        )\nGO\n\n\nSELECT * FROM silver.vehicle_type\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_usp_create_silver_propietary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_propietary\nAS \nBEGIN\n\n    IF OBJECT_ID('silver.propietary') IS NOT NULL\n        DROP EXTERNAL TABLE silver.propietary;\n\n    CREATE EXTERNAL TABLE silver.propietary\n    WITH\n    (\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/propietary',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT * FROM bronze.propietary;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_create_silver_vehicle_registration')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\n/*\nIF OBJECT_ID('silver.vehicle_registration')IS NOT NULL\n    DROP EXTERNAL TABLE silver.vehicle_registration\nGO\n\nCREATE EXTERNAL TABLE silver.vehicle_registration\nWITH \n(\n      DATA_SOURCE = electric_vehicle_src,\n      LOCATION = 'silver/vehicle_registration',\n      FILE_FORMAT = parquet_file_format\n)\nAS\n\nSELECT * \nFROM bronze.vehicle_registration_csv\nGO\n\n\nSELECT * \nFROM silver.vehicle_registration\nGO\n*/\n\nEXEC silver.usp_silver_vehicle_registration '2024', '01' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '02' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '03' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '04' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '05' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '06' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '07' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '08' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '09' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '10' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '11' GO\nEXEC silver.usp_silver_vehicle_registration '2024', '12' GO\nEXEC silver.usp_silver_vehicle_registration '2025', '01' GO\nEXEC silver.usp_silver_vehicle_registration '2025', '02' GO\nEXEC silver.usp_silver_vehicle_registration '2025', '03' GO\nEXEC silver.usp_silver_vehicle_registration '2025', '04' GO\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_usp_create_silver_location')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_location\nAS \nBEGIN\n\n    IF OBJECT_ID('silver.location') IS NOT NULL\n        DROP EXTERNAL TABLE silver.location;\n\n    CREATE EXTERNAL TABLE silver.location\n    WITH\n    (\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/location',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT * FROM bronze.location;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_create_silver_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/ingestion"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\n-- Create view for \"vehicle_registration\"\nDROP  VIEW IF EXISTS silver.vw_vehicle_registration\nGO\n\nCREATE VIEW silver.vw_vehicle_registration\nAS\n    SELECT  \n        result.filepath(1) as year,\n        result.filepath(2) as month,\n        result.*\n    FROM\n        OPENROWSET(\n            BULK 'silver/vehicle_registration/year=*/month=*/*.parquet',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'PARQUET'\n        )\n        WITH(\n            vehicle_id          INT,\n            location_id         SMALLINT,\n            propietary_id       INT,\n            dol_vehicle_id      INT,\n            registration_date   DATETIME2(7)\n        )\n        AS [result]\n    GO\n\n    SELECT * FROM silver.vw_vehicle_registration\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_usp_create_silver_cafv_eligibility')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_cafv_eligibility\nAS \nBEGIN\n\n    IF OBJECT_ID('silver.cafv_eligibility') IS NOT NULL\n        DROP EXTERNAL TABLE silver.cafv_eligibility;\n\n    CREATE EXTERNAL TABLE silver.cafv_eligibility\n    WITH\n    (\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/cafv_eligibility',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT \n        cafv_eligibility_ID, classification\n        FROM\n        OPENROWSET(\n            BULK 'bronze/cafv_eligibility.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b'\n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS cafv_eligibility\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            cafv_eligibility_ID SMALLINT '$.cafvEligibility',\n            classification VARCHAR(100)\n        );\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_usp_create_silver_vehicle_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/ldw/usp"
				},
				"content": {
					"query": "USE electric_vehicle_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_vehicle_type\nAS \nBEGIN\n\n    IF OBJECT_ID('silver.vehicle_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vehicle_type;\n\n    CREATE EXTERNAL TABLE silver.vehicle_type\n    WITH\n    (\n        DATA_SOURCE = electric_vehicle_src,\n        LOCATION = 'silver/vehicle_type',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT \n        vehicleType, electric_vehicle_type\n        FROM\n        OPENROWSET(\n            BULK 'bronze/vehicle_type.json',\n            DATA_SOURCE = 'electric_vehicle_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'            \n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS vehicle_type\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH (\n            vehicleType SMALLINT '$.vehicleType',\n            electric_vehicle_type VARCHAR(50) '$.electricVehicleType'\n        );\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_function')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "--Intro a las Funciones\nUSE electric_vehicle_explorer\n\nSELECT\n    MIN(electricRange) as min_electricRange,\n    MAX(electricRange) as max_electricRange,\n    AVG(electricRange) as avg_electricRange,\n    COUNT(1) as total_number_of_electric_range,\n    COUNT(electricRange) as not_null_total_number_of_electric_range\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                electricRange       SMALLINT,\n                baseMSRP            INT,\n                vehicheTypeId       SMALLINT,\n                cafvEligibilityId   SMALLINT,\n                vehicleLocation     VARCHAR(30)\n    )\n     AS [result]\n     WHERE electricrange > 20 ;\n\n\n--Funciones de Agregacion\nSELECT\n   make, \n   count(make) as total_count\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                electricRange       SMALLINT,\n                baseMSRP            INT,\n                vehicheTypeId       SMALLINT,\n                cafvEligibilityId   SMALLINT,\n                vehicleLocation     VARCHAR(30)\n    )\n     AS [result]\n     GROUP by make\n     HAVING COUNT(make) > 1000;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer\n--Show the number of types of electric vehicles\nSELECT\n    electric_vehicle_type,\n    COUNT(1) as number_of_vehicle\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicleTypeId       SMALLINT 8\n                \n    )     AS vehicle\n    JOIN \n       OPENROWSET(\n        BULK 'vehicle_type.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        vehicleType SMALLINT,\n        electric_vehicle_type VARCHAR(50) '$.electricVehicleType'\n    ) \n    ON vehicle.vehicleTypeId  = vehicleType\n    GROUP by electric_vehicle_type\n    ORDER BY electric_vehicle_type;\n\n     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_data_explorer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer\n/*\nMostrar informacion del vehiculo y su clasificacion del tercer trimestre del 2024\nEjemplo de datos a continuacion: \n-----------------------------------------------------------------------------------------------------------------------\nmodel           Year           make         model       classification                              year        month\n7SAYGAEEXP      2023           TESLA        MODEL Y     Eligibility unknown as battery range ...    2024        08\n1N4AZ0CP2D      2013           NISSAN       LEAF        Clean Alternative Fuel Vehicle Eligible     2024        08\n1FMCU0E15R      2024           FORD         ESCAPE      Clean Alternative Fuel Vehicle Eligible     2024        08\n-----------------------------------------------------------------------------------------------------------------------\n\n*/\n-- Primera Forma -> 54649\nSELECT \n\t\tv.vin, v.modelYear, v.make, v.model\n        , classification\n        , vr.filepath(1) AS year, vr.filepath(2) AS month\nFROM OPENROWSET(\n                BULK 'cafv_eligibility.json',\n                DATA_SOURCE = 'electric_vehicle_data_bronze',\n                FORMAT = 'CSV',\n                FIELDTERMINATOR = '0x0b',\n                FIELDQUOTE = '0x0b',\n                ROWTERMINATOR = '0x0b'\n                )\n            WITH(\n                jsonDoc NVARCHAR(MAX)\n                ) AS cafv_eligibility\n                CROSS APPLY OPENJSON(jsonDoc)\n                WITH(\n                    cafv_eligibility_id SMALLINT '$.cafvEligibility',\n                    classification      VARCHAR(100)\n                    )\n            INNER JOIN\t\t\t\t--JOIN 1\n                OPENROWSET(\n                BULK 'vehicle.csv',\n                DATA_SOURCE = 'electric_vehicle_data_bronze',\n                FORMAT = 'CSV',\n                 PARSER_VERSION = '2.0',\n                HEADER_ROW = TRUE,\n                FIELDTERMINATOR = ',',\n                ROWTERMINATOR = '\\\\n'\n                            )\n            WITH(\n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                cafvEligibilityId   SMALLINT\n                ) AS [v]\n            INNER JOIN\t\t\t\t--JOIN 2\n                OPENROWSET(\n                BULK 'vehicle_registration_parquet/year=*/month=*/*.parquet',\n                DATA_SOURCE = 'electric_vehicle_data_bronze',\n                FORMAT = 'PARQUET'\n\t\t\t\t\t\t  ) \n            WITH(\n                vehicleId           INT,\n                registrationDate    DATETIME2(7)\n                )AS vr\n                 ON (v.vehicleId = vr.vehicleId)\n                 ON (v.cafvEligibilityId = cafv_eligibility_id)\n                 WHERE vr.filepath(1) = '2024' AND vr.filepath(2) IN ('06', '07', '08', '09');\n                            \n                            \n                            \n-- Segunda Forma -> 54649\n\nWITH cte_cafv_eligibility AS\t--CTE 1\n(\n        SELECT cafv_eligibility_id, classification\n        FROM \tOPENROWSET(\n                BULK 'cafv_eligibility.json',\n                DATA_SOURCE = 'electric_vehicle_data_bronze',\n                FORMAT = 'CSV',\n                FIELDTERMINATOR = '0x0b',\n                FIELDQUOTE = '0x0b',\n                ROWTERMINATOR = '0x0b'\n            )\n        WITH(\n                jsonDoc NVARCHAR(MAX)\n            )\tAS cafv_eligibility\n                CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n                cafv_eligibility_id SMALLINT '$.cafvEligibility',\n                classification      VARCHAR(100)\n            )\n            ),\n    cte_vehicle AS\t\t\t\t--CTE 2\n(\n        SELECT *\n        FROM\n\t\t\t\tOPENROWSET(\n\t\t\t\tBULK 'vehicle.csv',\n\t\t\t\tDATA_SOURCE = 'electric_vehicle_data_bronze',\n\t\t\t\tFORMAT = 'CSV',\n                PARSER_VERSION = '2.0',\n                HEADER_ROW = TRUE,\n                FIELDTERMINATOR = ',',\n                ROWTERMINATOR = '\\n'\n                            )\n        WITH(\n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                cafvEligibilityId   SMALLINT\n                            ) AS [result]\n),\n    cte_vehicle_registration AS\t--CTE 3\n(\n        SELECT\n\t\t\t\tvr_data.*,\n\t\t\t\tvr_data.filepath(1) AS year,\n\t\t\t\tvr_data.filepath(2) AS month\n        FROM \n\t\t\t\tOPENROWSET(\n                           BULK 'vehicle_registration_parquet/year=*/month=*/*.parquet',\n                           DATA_SOURCE = 'electric_vehicle_data_bronze',\n                           FORMAT = 'PARQUET'\n                           ) \n        WITH(\n            vehicleId           INT,\n            registrationDate    DATETIME2(7)\n            )AS vr_data\n)\n\tSELECT cv.vin, cv.modelYear, cv.make, cv.model\n\t\t\t, cce.classification\n\t\t\t, cvr.year, cvr.month\n\tFROM cte_vehicle AS cv \n\tINNER JOIN cte_vehicle_registration AS cvr ON (cv.vehicleId = cvr.vehicleId)\n\tINNER JOIN cte_cafv_eligibility AS cce ON (cv.cafvEligibilityId = cce.cafv_eligibility_id)\n\tWHERE year = '2024' AND month IN ('06', '07', '08', '09');\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_vehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourseespdl.dfs.core.windows.net/electric-vehicle-data/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n\n\n--Segunda Manera de realizar la consulta con abfss\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n--Examinar el data type de las columnas Para limitar las columnas varchar a un tamaño menor\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n        ) AS [result];'\n\n--Obtener la longitud maxima de las columnas \nSELECT\n   MAX(LEN(vehicleId)) AS vehicle_id,\n   MAX(LEN(vin)) AS vin,\n   MAX(LEN(modelYear)) AS model_year,\n   MAX(LEN(make)) AS make,\n   MAX(LEN(model)) AS model,\n   MAX(LEN(electricRange)) AS electric_range,\n   MAX(LEN(baseMSRP)) AS base_MSRP,\n   MAX(LEN(vehicheTypeId)) AS vehiche_type_id,\n   MAX(LEN(cafvEligibilityId)) AS cafv_eligibility_id,\n   MAX(LEN(vehicleLocation)) AS vehicle_location\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n        ) AS [result]\n\n--Dentro del With colocamos el datatype que deseamos asignar en la consulta\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicle_id          INT 1,\n                vin                 VARCHAR(10) 2,\n                modelYear           SMALLINT 3,\n                make                VARCHAR(25) 4,\n                model               VARCHAR(25) 5,\n                electricRange       SMALLINT 6,\n                baseMSRP            INT 7,\n                vehicleTypeId       SMALLINT 8,\n                cafvEligibilityId   SMALLINT 9,\n                vehicleLocation     VARCHAR(30) 10\n    )     AS [result];\n\n\n ---Para comprobar el cambio \n EXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                electricRange       SMALLINT,\n                baseMSRP            INT,\n                vehicheTypeId       SMALLINT,\n                cafvEligibilityId   SMALLINT,\n                vehicleLocation     VARCHAR(30)\n    )\n     AS [result];'\n\n--Revisar Collation \nSelect name, collation_name\nFROM sys.databases;\n\n--Especificar UTF-8 Collation para columnas VARCHAR en una consulta\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n        \n                vehicleId           INT,\n                vin                 VARCHAR(10) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n                modelYear           SMALLINT,\n                make                VARCHAR(25) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n                model               VARCHAR(25) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n                electricRange       SMALLINT,\n                baseMSRP            INT,\n                vehicheTypeId       SMALLINT,\n                cafvEligibilityId   SMALLINT,\n                vehicleLocation     VARCHAR(30) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    )\n     AS [result];\n\n\n--Especificar UTF-8 Collation a Nivel de DB\n\nCREATE DATABASE electric_vehicle_explorer;\nUSE electric_vehicle_explorer\n\nSelect name, collation_name\nFROM sys.databases;\n\nALTER DATABASE electric_vehicle_explorer COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n\n--Seleccionar solo las columnas necesarias \nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )   WITH (\n                       \n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25), \n                model               VARCHAR(25), \n                electricRange       SMALLINT,\n                baseMSRP            INT               \n    )\n     AS [result];\n\n\n--Leer data de un archivo sin Headers\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/vehicle_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    )   WITH (\n                       \n                vin                 VARCHAR(10) 2,\n                make                VARCHAR(25) 4, \n                model               VARCHAR(25) 5\n                         \n    )\n     AS [result];\n\n-- Crear el External Data Source\nCREATE EXTERNAL DATA SOURCE electric_vehicle_data\nWITH(\n    LOCATION = 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/'\n);\n\nCREATE EXTERNAL DATA SOURCE electric_vehicle_data_bronze\nWITH(\n    LOCATION = 'abfss://electric-vehicle-data@synapsecourseespdl.dfs.core.windows.net/bronze/'\n);\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n    )   WITH (\n        \n                vehicleId           INT,\n                vin                 VARCHAR(10),\n                modelYear           SMALLINT,\n                make                VARCHAR(25),\n                model               VARCHAR(25),\n                electricRange       SMALLINT,\n                baseMSRP            INT,\n                vehicheTypeId       SMALLINT,\n                cafvEligibilityId   SMALLINT,\n                vehicleLocation     VARCHAR(30)\n    )\n     AS [result];\n\n     DROP EXTERNAL DATA SOURCE electric_vehicle_data;\n\n     Select name, location from sys.external_data_sources;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer;\n----------------------------------------------------------------------\n--------------Primera Tarea leer archivo calendar.csv\n----------------------------------------------------------------------\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ';',\n        HEADER_ROW = TRUE\n    ) AS calendar;\n\n--Revisar el tipo de dato que le asigna Synapse\nEXEC sp_describe_first_result_set N'SELECT *\nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        DATA_SOURCE = ''electric_vehicle_data_bronze'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        FIELDTERMINATOR = '';'',\n        HEADER_ROW = TRUE\n    ) AS calendar;'\n\n--Cambiar el tipo de datos para economizar las consultas\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ';',\n        HEADER_ROW = TRUE\n) WITH (\n    date_key        INT 1, \n    date            DATE 2, \n    year            SMALLINT 3, \n    month           TINYINT 4, \n    day             TINYINT 5, \n    month_name      VARCHAR(10) 6, \n    day_name        VARCHAR(10) 7,\n    day_of_year     SMALLINT 8,\n    week_of_month   TINYINT 9, \n    week_of_year    TINYINT 10\n) as calendar;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_location')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Explorar un archivo CSV que contiene '\\' como separador en las columnas",
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "use electric_vehicle_explorer;\n\nSELECT * \nFROM\n    OPENROWSET(\n        BULK 'location.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ';',\n        FIELDQUOTE = '\\'\n    ) as location;\n        ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_propietary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Explorar un archivo .tsv",
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "use electric_vehicle_explorer;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'propietary.tsv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = '\\t',\n        HEADER_ROW = TRUE\n    ) AS propietary;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_vehicle_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Explorar un archivo json de una sola linea",
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "use electric_vehicle_explorer;\n\nSELECT \n    CAST(JSON_VALUE (jsonDoc, '$.vehicleType') as SMALLINT) vehicle_type,\n    CAST(JSON_VALUE (jsonDoc, '$.electricVehicleType') as VARCHAR(50)) electric_vehicle_type\n    FROM\n    OPENROWSET(\n        BULK 'vehicle_type.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type\n\n/*\nUtilizando el CAST asignamos el data type adecuado para economizar en las consultas \n*/\n\n--Verificar el data type \nEXEC sp_describe_first_result_set N'\nSELECT \n    CAST(JSON_VALUE (jsonDoc, ''$.vehicleType'') as SMALLINT) vehicle_type,\n    CAST(JSON_VALUE (jsonDoc, ''$.electricVehicleType'') as VARCHAR(50)) electric_vehicle_type\n    FROM\n    OPENROWSET(\n        BULK ''vehicle_type.json'',\n        DATA_SOURCE = ''electric_vehicle_data_bronze'',\n        FORMAT = ''CSV'',\n        FIELDTERMINATOR = ''0x0b'',\n        FIELDQUOTE = ''0x0b'',\n        ROWTERMINATOR = ''0x0a''\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type;'\n\n\n\n--Funcion OPENJSON    \nSELECT \n   vehicleType,\n   electric_vehicle_type\n    FROM\n    OPENROWSET(\n        BULK 'vehicle_type.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        vehicleType SMALLINT,\n        electric_vehicle_type VARCHAR(50) '$.electricVehicleType'\n    );\n\n--------------------------------------------------\n--- Reading data from JSON with arrays -----------\n--------------------------------------------------\n--USE json_value to explore the array\nSELECT \n    CAST(JSON_VALUE (jsonDoc, '$.vehicleType') as SMALLINT) vehicle_type,\n    CAST(JSON_VALUE (jsonDoc, '$.electricVehicleType[0].value') as VARCHAR(50)) electric_vehicle_type_0,\n    CAST(JSON_VALUE (jsonDoc, '$.electricVehicleType[1].value') as VARCHAR(50)) electric_vehicle_type_1\n    FROM\n    OPENROWSET(\n        BULK 'vehicle_type_array.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type\n\n\n--USE openjson to explore the array\nSELECT \n    vehicleType,\n    electricVehicleType_value\n    FROM\n    OPENROWSET(\n        BULK 'vehicle_type_array.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS vehicle_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n         vehicleType SMALLINT,\n        electricVehicleType NVARCHAR(MAX) as Json\n    )\n    CROSS APPLY OPENJSON(electricVehicleType)\n    WITH(\n        sub_type SMALLINT,\n        electricVehicleType_value VARCHAR(50) '$.value'\n    );\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_cafv_eligibility')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer;\n\nSELECT \n    cafv_eligibility_ID,\n    classification\n    FROM\n    OPENROWSET(\n        BULK 'cafv_eligibility.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS cafv_eligibility\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        cafv_eligibility_ID SMALLINT '$.cafvEligibility',\n        classification VARCHAR(100)\n    );\n\n---Process multi line file\nSELECT \n    cafv_eligibility_ID, classification\n    FROM\n    OPENROWSET(\n        BULK 'cafv_eligibility_multi_line.json',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS cafv_eligibility\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        cafv_eligibility_ID SMALLINT '$.cafvEligibility',\n        classification VARCHAR(100)\n    );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_vehicle_registration_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=2024/month=01/vehicle_registration_2024-01.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n--Select data from a folder\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=2024/month=01/*.csv',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n--Select data from subfolder\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=2024/**',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n  --Get data from more than one file  \n  SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ('vehicle_registration_csv/year=2024/month=01/*',\n                'vehicle_registration_csv/year=2024/month=03/*'),\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n--USe more than 1 wildcard character\n  SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n------File metadata function filename()\n\n  SELECT\n    result.filename() as file_name,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n    Group by result.filename()\n    ORDER BY result.filename();\n\n-- Limit Data using filename() con WHERE\n\n  SELECT\n    result.filename() as file_name,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n    WHERE result.filename() IN ('vehicle_registration_2024-01.csv','vehicle_registration_2025-01.csv')\n    Group by result.filename()\n    ORDER BY result.filename();\n\n--Uso de la funcion Filepath () \n\n SELECT\n    result.filename() as file_name,\n    result.filepath() as file_path,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n    WHERE result.filename() IN ('vehicle_registration_2024-01.csv','vehicle_registration_2025-01.csv')\n    Group by result.filename(), result.filepath()\n    ORDER BY result.filename(), result.filepath();\n\n-----------------------\n    SELECT\n    result.filepath() as file_path,\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n    WHERE result.filename() IN ('vehicle_registration_2024-01.csv','vehicle_registration_2025-01.csv')\n    Group by \n    result.filepath() ,\n    result.filepath(1) ,\n    result.filepath(2) \n    ORDER BY \n    result.filepath() ,\n    result.filepath(1) ,\n    result.filepath(2) ;\n\n--Usar filepath() en el WHERE (Optimizando la consulta)\n\n SELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_csv/year=*/month=*/*',                \n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nWHERE \n    result.filepath(1) = '2024'\n    AND result.filepath(2) IN ('06','07','08')\n    GROUP BY result.filepath(1) ,result.filepath(2) \n    ORDER BY result.filepath(1) ,result.filepath(2) ;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_vehicle_registration_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_parquet/year=2024/month=01/',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n--Saber el tipo de dato de cada columna\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''vehicle_registration_parquet/year=2024/month=01/'',\n        DATA_SOURCE = ''electric_vehicle_data_bronze'',\n        FORMAT = ''PARQUET''\n    ) AS [result];'\n\n\n--Definir columnas y tipos de datos\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'vehicle_registration_parquet/year=2024/month=01/',\n        DATA_SOURCE = 'electric_vehicle_data_bronze',\n        FORMAT = 'PARQUET'\n    ) \n        WITH (\n            vehicleId           INT,\n            locationId          SMALLINT,\n            propietaryId        TINYINT,\n            dolVehicleId        INT,\n            registrationDate    DATETIME2(7)\n        )AS [result];\n\n\n/*\n--TAREA\n1) Query from folders using wildcard characters\n2) Use filename function.\n3) Query from subfolders\n4) Use filepath function to select only from certain partitions\n\n*/\n\n--1) Query from folders using wildcard characters\nSELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'vehicle_registration_parquet/year=2024/month=01/*.parquet',\n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'PARQUET'\n) AS vr_data;\n\n--2) Use filename function.\nSELECT TOP 100 \n    vr_data.filename() as file_name,\n    vr_data.*\nFROM OPENROWSET(\n    BULK 'vehicle_registration_parquet/year=2024/month=01/*.parquet',\n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'PARQUET'\n) AS vr_data;\n\n--3) Query from subfolders\nSELECT TOP 100 \n    vr_data.filename() as file_name,\n    vr_data.*\nFROM OPENROWSET(\n    BULK 'vehicle_registration_parquet/**',\n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'PARQUET'\n) AS vr_data;\n\n--4) Use filepath function to select only from certain partitions\nSELECT  \n    vr_data.filepath(1) as year,\n    vr_data.filepath(2) as month,\n    count(1) as record_count\nFROM OPENROWSET(\n    BULK 'vehicle_registration_parquet/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'PARQUET'\n) AS vr_data\nWHERE vr_data.filepath(1) = '2024'\n    AND vr_data.filepath(2) IN ('06','07','08')\nGROUP BY vr_data.filepath(1),vr_data.filepath(2)\nORDER BY vr_data.filepath(1),vr_data.filepath(2);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_vehicle_registration_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "electric_vechicle/explorer"
				},
				"content": {
					"query": "USE electric_vehicle_explorer\n\nSELECT TOP 100 *\nFROM OPENROWSET (\n    BULK 'vehicle_registration_delta/', --se debe consultar a esta altura ya que ahi esta la carpeta 'delta_log'\n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'DELTA'\n) AS vehicle_registration;\n\n--Revisar el tipo de dato que le asigna synapse\nEXEC sp_describe_first_result_set N'\nSELECT TOP 100 *\nFROM OPENROWSET (\n    BULK ''vehicle_registration_delta/'', \n    DATA_SOURCE = ''electric_vehicle_data_bronze'',\n    FORMAT = ''DELTA''\n) AS vehicle_registration;'\n\n\n--Asignar un tipo de dato especifico y seleccionar solo las columnas necesarias\nSELECT TOP 100 *\nFROM OPENROWSET (\n    BULK 'vehicle_registration_delta/', \n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'DELTA'\n)WITH(\n    propietaryId        TINYINT,\n    dolVehicleId        INT,\n    year                VARCHAR(4),\n    month               VARCHAR(2)\n) AS vehicle_registration;\n\n\nSELECT COUNT(DISTINCT locationId)\nFROM OPENROWSET (\n    BULK 'vehicle_registration_delta/', \n    DATA_SOURCE = 'electric_vehicle_data_bronze',\n    FORMAT = 'DELTA'\n) AS vehicle_registration\nWHERE year= '2024' AND month = '01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "electric_vehicle_explorer",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Vehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourseespdl.dfs.core.windows.net/demo/vehicle.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}